Metadata-Version: 1.0
Name: groupdocs.comparison
Version: 1.0
Summary: GroupDocs Comparison for Plone CMS
Home-page: http://svn.plone.org/svn/collective/
Author: UNKNOWN
Author-email: UNKNOWN
License: gpl
Description: GroupDocs HTML5 PDF Viewer plugin for Plone CMS (Source)
        =============================
        
        
        
        ###Plugin installation steps:
        
        When plugin is available only on GitHub (not released to Pypi) it can be installed with buildout like this:
        
        * Create groupdocs.comparison folder under C:\Plone42\src\ folder
        * Download files from GitHub and copy all the files into created folder.
        * Change buildout.cfg file
        * Add groupdocs.comparison record into "eggs =" section
        * Add src/groupdocs.comparison into "develop =" section
        * Run buildout .\bin\buildout.exe from Plone installation folder(For example C:\Plone42).
        * Restart plone.
        * Go to Admin->Site setup (http://localhost:8080/PloneGD/@@overview-controlpanel)
        * Open Add-ons section - http://localhost:8080/PloneGD/prefs_install_products_form
        * Find GroupDocs Viewer 1.0 add-on, check it and activate it.
        
        ###Using plugin:
        * Modify or create a new page
        * Click Mange Portlets link http://screencast.com/t/fbjWrqCJuCfP
        * Open Add portlet.. dropbox and choose GroupDocs Viewer portlet - http://screencast.com/t/fAAlxv1dL
        * Configure portlet's parameters and press Save button - http://screencast.com/t/zJW3kiyMrW
        * Open the created page (http://localhost:8080/PloneGD/gd-test)  - GD Viwer will be embeded into portlet region - http://screencast.com/t/VMd3UZc5
        
        How to get [Document ID (GUID)](http://groupdocs.com/docs/pages/viewpage.action?pageId=1409575)
        
        Change history
        **************
        
        Changelog
        =========
        
        1.0-dev (unreleased)
        --------------------
        
        - Package created using templer
          []
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  
        
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.  We then ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        Finally, let's return to the front page of our site before continuing
        
            >>> browser.open(portal_url)
        
        -*- extra stuff goes here -*-
        
        
        Contributors
        ************
        
        Note:  place names and roles of the people who contribute to this package
               in this file, one to a line, like so:
        
        - Marketplace Team
        
        Download
        ********
        
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
